<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Fletcher Walmsley</title>
    <link href="https://fletcherpwalmsley.github.io/feed.xml" rel="self" />
    <link href="https://fletcherpwalmsley.github.io" />
    <updated>2021-05-30T23:35:30+12:00</updated>
    <author>
        <name>Fletcher Walmsley</name>
    </author>
    <id>https://fletcherpwalmsley.github.io</id>

    <entry>
        <title>The Foam Boat That (Almost) Could</title>
        <author>
            <name>Fletcher Walmsley</name>
        </author>
        <link href="https://fletcherpwalmsley.github.io/the-foam-boat-that-almost-could/"/>
        <id>https://fletcherpwalmsley.github.io/the-foam-boat-that-almost-could/</id>

        <updated>2021-05-30T23:35:30+12:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <p>Hello, if you're reading this post after looking at the last one, you might have noticed that this second post has been created almost eleven months later!</p>
<p>There is a reason for such delay is pretty simple, I have not gotten the boat to the state I have wanted before making another post. The first post was all about the creation an manual driving of the vessel. It documented the build of the hull, an overview of the electrical parts, and the mobile software used to remotely control it. This is to say, I achieved all the goals I had set. After making that post I set what seemed like a reasonable next step, to make it autonomous. In this regard I succeeded as can be seen in the video below</p>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube.com/embed/sgallTuI2Vk" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>The above video shows the boat accurately following a small path along the shoreline of Lake Arapuni. This however is the most successful sail the boat has taken to date. I'll discuss the reasons for this at the end. But first, the major progress that has been made. </p>
<p>A lot has changed since the last post, as such, the best way to show the change is with photos. Figure 1A shows the old electrical set-up, with Figure 1B showing the current one. Note, Figure 1B does not show the GPS or 9 axis IMU that was also installed </p>
<div class="gallery-wrapper gallery-wrapper--full"><div class="gallery"  data-is-empty="false" data-columns="2">
<figure class="gallery__item"><a href="https://fletcherpwalmsley.github.io/media/posts/9/gallery/20200415_180253.jpg" data-size="4032x3024"><img loading="lazy" src="https://fletcherpwalmsley.github.io/media/posts/9/gallery/20200415_180253-thumbnail.jpg" alt="" width="720" height="540"></a>
<figcaption>Figure 1A: Electrical hardware, as found in last post (the power bank to power the rudder servo is absent in this image)</figcaption>
</figure>
<figure class="gallery__item"><a href="https://fletcherpwalmsley.github.io/media/posts/9/gallery/v1hull_all_elect.jpg" data-size="1705x959"><img loading="lazy" src="https://fletcherpwalmsley.github.io/media/posts/9/gallery/v1hull_all_elect-thumbnail.jpg" alt="" width="720" height="405"></a>
<figcaption>Figure 1B: Electrical hardware as it currently stands</figcaption>
</figure>
</div></div>
<p>First major change was the adjustable buck converter arrived, which took the place of the mobile power pack and allowed the rudder servo to be powered by the main battery. </p>
<p>Another major change was the design decision to switch from using two Arduino Nanos to one ESP32. This was partly due to the second Nano never arriving, but also due to the ESP32 having vastly more processing power than the Nanos combined, which would enable all functions to be run on on MCU, greatly simplifying the design as communications between MCUs was no longer needed. </p>
<p>The new ESP32 had a perf-board with an integrated reverse polarity diode and a linear voltage regulator (LVR) which steps the battery voltage down to 5v. This voltage regulator is not strictly necessary as the ESP32's onboard linear voltage regulator can handle the maximum voltage of the Li-Po battery (12.6V) and step it down to the required 3.3V, but it gets very hot doing so. This problem is exacerbated in this use case as the ESP32's regulator is being used to power relatively hungry external components like the GPS and IMU unit. Thus with the external voltage regulator, the ESP32's only has to regulate the voltage from 5V to 3.3V, instead of 12.6V. Which makes a large difference to the internal regulators temperature, as linear voltage regulators reduced voltage by discarding the extra potential as heat. (which is governed by the equation P= (Vin - Vout) * ILoad). The efficiency of the boat could be increased by changing to a switching regulator, which seeing as the the ESP32 and all its connected devices commonly draws over 0.5A, could reduce the boats power draw by around 4 watts, a not insignificant amount on a ~57 watt hour battery. An image of the created board can be seen in Figure 2.</p>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://fletcherpwalmsley.github.io/media/posts/9/esp2board-4.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://fletcherpwalmsley.github.io/media/posts/9/responsive/esp2board-4-xs.jpg 300w ,https://fletcherpwalmsley.github.io/media/posts/9/responsive/esp2board-4-sm.jpg 480w ,https://fletcherpwalmsley.github.io/media/posts/9/responsive/esp2board-4-md.jpg 768w ,https://fletcherpwalmsley.github.io/media/posts/9/responsive/esp2board-4-lg.jpg 1024w ,https://fletcherpwalmsley.github.io/media/posts/9/responsive/esp2board-4-xl.jpg 1360w ,https://fletcherpwalmsley.github.io/media/posts/9/responsive/esp2board-4-2xl.jpg 1600w"  alt="" width="266" height="316">
<figcaption >Figure 2: ESP32 on it's perf board with external voltage regulator and reverse polarity diode shown </figcaption>
</figure>
<p>Another change was the addition of an SD reader, this has been used as an easy way to transfer maps to the boat. Although not currently implemented, it will later also be used to save voyage data.  </p>
<p>The final major change was the switch from using a Honeywell HMC5883L (or more specifically the Chinese licenced version, the QMC5883L) magnetometer to the Bosch made BNO055 9-axis IMU. This change enabled the used of a more modern sensor, with onboard sensor fusion to enable easy implementation of a tilt compensated compass. But the main reason was an attempt to fix the major problem alluded at the beginning, a problem I have dubbed "IMU dropout".</p>
<p>The IMU dropout issue, although not really taken much notice of back then, first showed itself in this project back when I was testing the magnetometer on the servo (video can be seen in the last post) in which the magnetometer would randomly stop sending data and all zeros would be the only thing the MCU could read. Fast forward to the first implementation of the automated control system, an image of which can be seen in Figure 3.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-columns="1">
<figure class="gallery__item"><a href="https://fletcherpwalmsley.github.io/media/posts/9/gallery/first_auto_photo-3.jpg" data-size="1705x959"><img loading="lazy" src="https://fletcherpwalmsley.github.io/media/posts/9/gallery/first_auto_photo-3-thumbnail.jpg" alt="" width="720" height="405"></a>
<figcaption>Figure 3: First Assembly of the automated system</figcaption>
</figure>
</div></div>
<p>Again the IMU dropout problem occurred, as soon as the motors were enabled, the Honeywell senor would stop working. Eventually I found that if I disabled PWM on the motors and thus have no speed control, the sensor would operate reasonably well. Deducing from this that either the PWM and I2C library were conflicting, or what I believed was the more likely issue, that the rapid switching of the motor, created a large amount of electromagnetic noise. As I wanted to get a better sensor with integrated gyro and accelerometers, the first major set I took to fixing this problem was to buy the Bosch sensor, which I hoped would be less susceptible to the problem. This seemed to largely fix the issue and work continued.  </p>
<p>Eventually all the minor kinks were sorted out, extra duct tape was added to various parts of the hull to reduce the likely hood of water getting in the hull </p>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>The HMNZS Otorohanga - Beginning </title>
        <author>
            <name>Fletcher Walmsley</name>
        </author>
        <link href="https://fletcherpwalmsley.github.io/hmnzs-otorohanga/"/>
        <id>https://fletcherpwalmsley.github.io/hmnzs-otorohanga/</id>

        <updated>2021-05-30T23:34:31+12:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <p> </p>
<p>The HMNZS Otorohanga is an on going project that I began during the 2019/2020 summer. The initial idea for the project began before this however, during Semester 2 of 2019. After completing an intro course into control systems, I had the desire to learn more about them. After watching videos on YouTube about autopilot systems for RC planes, I had the desire to create my own autopilot systems. My initial plan was to create a homemade RC plane auto pilot system. However, after a bit of research I decided that this might be biting off more than I could chew for a first attempt. The next idea was to create a land based rover. This time, I determined that this wasn't ambitious enough and would be relatively boring to watch. This is when I settled on creating an autonomous boat. This idea had the benefit of not falling out of the sky if something goes wrong, a lake would provide a large open area giving great GPS signal, and I determined that a boat was likely to be the easiest to built. </p>
<p>So, at the beginning of January, I placed a large order for electronic components from Alibaba and began planning.</p>
<p>The first parts that arrived were the GPS module, Bluetooth module and Magnetometer (compass). The photo below shows these components on a breadboard and connected to a Arduino Uno. With the left most is the GPS unit, the middle is the Bluetooth Module and the right most is the Magnetometer . </p>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://fletcherpwalmsley.github.io/media/posts/6/IMG_20200118_174526-2.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://fletcherpwalmsley.github.io/media/posts/6/responsive/IMG_20200118_174526-2-xs.jpg 300w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/IMG_20200118_174526-2-sm.jpg 480w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/IMG_20200118_174526-2-md.jpg 768w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/IMG_20200118_174526-2-lg.jpg 1024w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/IMG_20200118_174526-2-xl.jpg 1360w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/IMG_20200118_174526-2-2xl.jpg 1600w"  alt="Figure 1: GPS and Magnetometer testing " width="444" height="333">
<figcaption >Figure 1: GPS and Magnetometer testing </figcaption>
</figure>
<p>With the above setup, an Android app was made using MIT's App Inventor  to send GPS coordinates to the Arduino over a Bluetooth connection. A screenshot of this App can be seen below</p>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://fletcherpwalmsley.github.io/media/posts/6/Seeker_App-2.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://fletcherpwalmsley.github.io/media/posts/6/responsive/Seeker_App-2-xs.jpg 300w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/Seeker_App-2-sm.jpg 480w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/Seeker_App-2-md.jpg 768w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/Seeker_App-2-lg.jpg 1024w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/Seeker_App-2-xl.jpg 1360w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/Seeker_App-2-2xl.jpg 1600w"  alt="" width="212" height="448">
<figcaption >Screenshot of the GPS app</figcaption>
</figure>
<p>From here, the Ardunio would print out over the serial monitor to a connected Laptop what heading the user needed to walk in to reach the desired location, along with the current heading and the distance in metres from the location.</p>
<p>Next, Ardunio Nanos, the rudder servo, and some perf board arrived. So, with a basic design mapped out, I soldered some headers to the perf board and connected them together with pieces of scrap wire. The chosen design used two Ardunio Nanos, as it was feared that a single one won't enough the processing power due to the high amount of floating point arthritic that would be required due to both the GPS and magnetometer processing. </p>
<p>Once this board was made, I decide to create and test a PID controller for the rudder. For this test I mounted the magnetometer to the arm of the rudder servo and created a controller that would attempt to keep the magnetometer pointed towards a 0 degree heading. A video of this in action can be seen in below.</p>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube.com/embed/j0m7tOLf_Ho" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>Considering that the magnetometer and PID gains weren't optimally calibrated, along with the test being done in a metal shipping container, I was pretty happy with the result. Unfortunately, I burnt out a nano and my only magnetometer in the process, which stopped any further development in this area. Due to Covid-19, I have had delays in getting replacement components. As such, I am yet to continue developing the PID system.</p>
<p>Due to the magnetometer being a critical part in the automated boats control system, I decided to temporarily make the remotely controlled via Smartphone using Bluetooth. This process was relatively simple as I could use the same perf board that had already created, with the only major change being in software. As such, the app was updated to have a second screen that could be used to send throttle and steering commands adn the Ardunio code was modified to decode and respond to the apps requests. The throttle on the boat was controlled by using the PWM function of the Ardunio which varied the speed of a DC motor via a MOSFET. The steering control was done using the Ardunios inbuilt servo control library which aloud the for easy communication between the two. </p>
<p>A screenshot of the modified Android app can be seen below</p>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://fletcherpwalmsley.github.io/media/posts/6/Manual_Control.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://fletcherpwalmsley.github.io/media/posts/6/responsive/Manual_Control-xs.jpg 300w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/Manual_Control-sm.jpg 480w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/Manual_Control-md.jpg 768w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/Manual_Control-lg.jpg 1024w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/Manual_Control-xl.jpg 1360w ,https://fletcherpwalmsley.github.io/media/posts/6/responsive/Manual_Control-2xl.jpg 1600w"  alt="" width="193" height="407">
<figcaption >Screenshot of the manual boat control portion of the App</figcaption>
</figure>
<p>With the code and electronics largely built, it was time to built the boat itself! The images below show the boat at various stages throughout the build. </p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-columns="2">
<figure class="gallery__item"><a href="https://fletcherpwalmsley.github.io/media/posts/6/gallery/Boat_Above.jpg" data-size="1236x927"><img loading="lazy" src="https://fletcherpwalmsley.github.io/media/posts/6/gallery/Boat_Above-thumbnail.jpg" alt="" width="720" height="540"></a>
<figcaption>Top View of the the boat</figcaption>
</figure>
<figure class="gallery__item"><a href="https://fletcherpwalmsley.github.io/media/posts/6/gallery/Boat_Duct_Tap.jpg" data-size="1228x921"><img loading="lazy" src="https://fletcherpwalmsley.github.io/media/posts/6/gallery/Boat_Duct_Tap-thumbnail.jpg" alt="" width="720" height="540"></a>
<figcaption>Underside of the boat while Duct Tape is being applied</figcaption>
</figure>
<figure class="gallery__item"><a href="https://fletcherpwalmsley.github.io/media/posts/6/gallery/Boat_Overview.jpg" data-size="1229x922"><img loading="lazy" src="https://fletcherpwalmsley.github.io/media/posts/6/gallery/Boat_Overview-thumbnail.jpg" alt="" width="720" height="540"></a>
<figcaption>Boat with it's electronic components removed</figcaption>
</figure>
<figure class="gallery__item"><a href="https://fletcherpwalmsley.github.io/media/posts/6/gallery/Boat_Rear.jpg" data-size="1233x924"><img loading="lazy" src="https://fletcherpwalmsley.github.io/media/posts/6/gallery/Boat_Rear-thumbnail.jpg" alt="" width="720" height="540"></a>
<figcaption>Read of the boat showing the prop</figcaption>
</figure>
<figure class="gallery__item"><a href="https://fletcherpwalmsley.github.io/media/posts/6/gallery/Boat_Eletronic_Components_in_Tub.jpg" data-size="1221x916"><img loading="lazy" src="https://fletcherpwalmsley.github.io/media/posts/6/gallery/Boat_Eletronic_Components_in_Tub-thumbnail.jpg" alt="" width="720" height="540"></a>
<figcaption>Image of the boat with all its electronic components installed</figcaption>
</figure>
</div></div>
<p>The boat itself was made out of foam boat, which was attached together with hotglue. The seals of which where covered with duct tape in case any gaps in the glue existed. </p>
<p>With all the required components installed, the HMNZS Otorohanga was now ready for testing. The videos below showcase both the App and the boat itself in action.</p>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube.com/embed/_Ga9dTswNfQ" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube.com/embed/b-F4Rv8bRAQ" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p>This is the current state of the project. I have began working on communication between the boat and my Laptop, which shows the boats location in real time with Google Earth. However, I am still waiting on parts that will allow me to implement this development into the boat. </p>
            ]]>
        </content>
    </entry>
</feed>
